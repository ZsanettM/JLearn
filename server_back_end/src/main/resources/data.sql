INSERT INTO tutorial(TID, LEVEL, POINTS, TITLE) VALUES
(0, 0, 20, 'Registration'),
(1, 1, 20, 'Simple Programs'),
(2, 1, 30, 'Variables'),
(3, 1, 35, 'Loops'),
(4, 2, 45, 'Functions'),
(5, 2, 45, 'Tuples, Lists & Dicts.'),
(6, 2, 55, 'For loops'),
(1000, 3, 100, 'Quiz Completed');   

INSERT INTO user(UID, EMAIL, PASSWORD, USERNAME, AVATAR) VALUES
(1, 'zs@m.com', '$2a$10$hypd7SYaVmnNOmFjGYAdC.Soo5zYXTVPquQXyUYEOLtZGCRuNRvaa', 'Lizzy', '../../assets/katie.png'),
(99, 't@test.com', '$2a$10$SaGFRFJg7vaJoMF/RXEc0e5Vruz66//1el7dcZ0eihyNvD5IwoZ9W', 'Maria', '../../assets/katie.png'),
(111, 't@t.com', '$2a$10$bR5ZGgwLA4l2TV6Jn1xsAO7ElpamXj.OdLUqe7RVCLA.LHDTFWKzm', 'Maria2', '../../assets/bughunt.png'),
(115, 'tostspam@t', '$2a$10$s2AFj72LXqUMwbmN7StdqO./12Cz8ectks8fHDZhL/zsdv75u/bcq', 'Angry_mouse', '../../assets/bughunt.png'),
(120, 't2@t.com', '$2a$10$Qj8JdLbwY8vqHuqZfmsliOyGuM1LAiyoB6ElEg1jlPLw8KzDLbnxu', 'Maria3', '../../assets/katie.png');     

INSERT INTO question(questionid, question, options) VALUES
(1, 'What is a correct syntax to output "Hello World" in Python?', '{     "opt1": "echo \\\"Hello World\\\"",     "opt2": "echo(\\\"Hello World\\\");",     "opt3": "p(\\\"Hello World\\\")",     "opt4": "print(\\\"Hello World\\\")" }'),
(2, 'How do you insert COMMENTS in Python code?', '{ \"opt1\": \"#This is a comment\", \"opt2\": \"//This is a comment\", \"opt3\": \"/*This is a comment*/\" }'),
(3, 'Which one is NOT a legal variable name?', '{ \"opt1\": \"my-var\", \"opt2\": \"my_var\", \"opt3\": \"_myvar\", \"opt4\": \"Myvar\" }'),
(4, 'How do you create a variable with the numeric value 5?', '{ \"opt1\": \"x = 5\", \"opt2\": \"x = int(5)\", \"opt3\": \"Both the other answers are correct\" }'),
(5, 'What is the correct file extension for Python files?', '{ \"opt1\": \".py\", \"opt2\": \".pyt\", \"opt3\": \".pt\", \"opt4\": \".pyth\" }'),
(6, 'How do you create a variable with the floating number 2.8?', '{ \"opt1\": \"Both the other answers are correct\", \"opt2\": \"x = 2.8\", \"opt3\": \"x = float(2.8)\" }'),
(7, 'What is the correct syntax to output the type of a variable or object in Python?', '{ \"opt1\": \"print(typeof(x))\", \"opt2\": \"print(type(x))\", \"opt3\": \"print(typeof x)\", \"opt4\": \"print(typeOf(x))\" }'),
(8, 'What is the correct way to create a function in Python?', '{ \"opt1\": \"def myFunction():\", \"opt2\": \"create myFunction():\", \"opt3\": \"function myfunction():\" }'),
(9, 'In Python, ''Hello'', is the same as "Hello"', '{ \"opt1\": \"True\", \"opt2\": \"False\" }'),
(10, 'What is a correct syntax to return the first character in a string?', '{ \"opt1\": \" x = \\\"Hello\\\".sub(0, 1)\", \"opt2\": \"x = \\\"Hello\\\"[0]\", \"opt3\": \"x = sub(\\\"Hello\\\", 0, 1)\" }'),
(11, 'Which method can be used to remove any whitespace from both the beginning and the end of a string?', '{ \"opt1\": \"strip()\", \"opt2\": \"ptrim()\", \"opt3\": \"len()\", \"opt4\": \"trim()\" }'),
(12, 'Which method can be used to return a string in upper case letters?', '{ \"opt1\": \"uppercase()\", \"opt2\": \"upperCase()\", \"opt3\": \"toUpperCase()\", \"opt4\": \"upper()\" }'),
(13, 'Which method can be used to replace parts of a string?', '{ \"opt1\": \"replace()\", \"opt2\": \"switch()\", \"opt3\": \"repl()\", \"opt4\": \"replaceString()\" }'),
(14, 'Which operator is used to multiply numbers?', '{ \"opt1\": \"*\", \"opt2\": \"%\", \"opt3\": \"x\", \"opt4\": \"#\" }'),
(15, 'Which operator can be used to compare two values?', '{ \"opt1\": \"==\", \"opt2\": \"=\", \"opt3\": \"<>\", \"opt4\": \"><\" }'),
(16, 'Which of these collections defines a LIST?', '{ \"opt1\": \"[\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"]\", \"opt2\": \"(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")\", \"opt3\": \"{\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"}\", \"opt4\": \"{\\\"name\\\": \\\"apple\\\", \\\"color\\\": \\\"green\\\"}\" }'),
(17, 'Which of these collections defines a TUPLE?', '{ \"opt1\": \"{\\\"name\\\": \\\"apple\\\", \\\"color\\\": \\\"green\\\"}\", \"opt2\": \"[\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"]\", \"opt3\": \"(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")\", \"opt4\": \"{\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"}\"  }'),
(18, 'Which of these collections defines a SET?', '{ \"opt1\": \"{\\\"name\\\": \\\"apple\\\", \\\"color\\\": \\\"green\\\"}\", \"opt2\": \"[\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"]\", \"opt3\": \"(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")\", \"opt4\": \"{\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"}\"  }'),
(19, 'Which of these collections defines a DICTIONARY?', '{ \"opt1\": \"{\\\"name\\\": \\\"apple\\\", \\\"color\\\": \\\"green\\\"}\", \"opt2\": \"[\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"]\", \"opt3\": \"(\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\")\", \"opt4\": \"{\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"}\"  }'),
(20, 'Which collection is ordered, changeable, and allows duplicate members?', '{ \"opt1\": \"LIST\", \"opt2\": \"TUPLE\", \"opt3\": \"DICTIONARY\", \"opt4\": \"SET\" }'),
(21, 'Which collection does not allow duplicate members?', '{ \"opt1\": \"LIST\", \"opt2\": \"TUPLE\", \"opt3\": \"SET\" }'),
(22, 'How do you start writing an if statement in Python?', '{ \"opt1\": \"if (x > y)\", \"opt2\": \"if x > y:\", \"opt3\": \"if x > y then:\" }'),
(23, 'How do you start writing a while loop in Python?', '{ \"opt1\": \"while x > y:\", \"opt2\": \"x > y while {\", \"opt3\": \"while (x > y)\", \"opt4\": \"while x > y {\" }'),
(24, 'How do you start writing a for loop in Python?', '{ \"opt1\": \"for x in y:\", \"opt2\": \"for x > y:\", \"opt3\": \"for each x in y:\" }'),
(25, 'Which statement is used to stop a loop?', '{ \"opt1\": \"break\", \"opt2\": \"exit\", \"opt3\": \"return\", \"opt4\": \"stop\" }');  

INSERT INTO score(SID, TID, UID, TIMESTMP) VALUES
(11, 3, 1, TIMESTAMP '2019-02-14 12:28:18.658'),
(49, 1, 1, TIMESTAMP '2019-02-19 16:59:01.366'),
(53, 2, 1, TIMESTAMP '2019-02-21 10:50:29.153'),
(62, 4, 1, TIMESTAMP '2019-02-22 15:53:34.096'),
(65, 1, 64, TIMESTAMP '2019-02-24 12:50:51.024'),
(66, 2, 64, TIMESTAMP '2019-02-24 12:50:59.159'),
(68, 3, 64, TIMESTAMP '2019-02-24 14:11:54.002'),
(101, 1, 100, TIMESTAMP '2019-02-26 14:45:04.436'),
(108, 0, 107, TIMESTAMP '2019-02-26 16:23:26.064'),
(110, 0, 109, TIMESTAMP '2019-02-26 16:28:39.662'),
(112, 0, 111, TIMESTAMP '2019-02-26 21:25:04.131'),
(113, 2, 111, TIMESTAMP '2019-02-26 21:25:47.831'),
(114, 3, 111, TIMESTAMP '2019-02-27 13:07:58.194'),
(116, 0, 115, TIMESTAMP '2019-03-01 22:21:55.532'),
(118, 1, 115, TIMESTAMP '2019-03-01 22:24:21.286'),
(121, 0, 120, TIMESTAMP '2019-03-02 12:49:51.427'),
(136, 0, 135, TIMESTAMP '2019-03-06 11:02:52.359'),
(138, 0, 137, TIMESTAMP '2019-03-06 11:09:29.733'),
(139, 1000, 111, TIMESTAMP '2019-03-06 11:34:44.79'),
(149, 1, 111, TIMESTAMP '2019-03-06 12:39:11.818'),
(153, 6, 111, TIMESTAMP '2019-03-06 12:55:56.918');        

INSERT INTO answer(answer_id, questionid, option) VALUES
(1, 1, 'print(\"Hello World\")'),
(2, 2, '#This is a comment'),
(3, 3, 'my-var'),
(4, 4, 'Both the other answers are correct'),
(5, 5, '.py'),
(6, 6, 'Both the other answers are correct'),
(7, 7, 'print(type(x))'),
(8, 8, 'def myFunction():'),
(9, 9, 'True'),
(10, 10, 'x = \"Hello\"[0]'),
(11, 11, 'strip()'),
(12, 12, 'upper()'),
(13, 13, 'replace()'),
(14, 14, '*'),
(15, 15, '=='),
(16, 16, '[\"apple\", \"banana\", \"cherry\"]'),
(17, 17, '(\"apple\", \"banana\", \"cherry\")'),
(18, 18, '{\"apple\", \"banana\", \"cherry\"}'),
(19, 19, '{\"name\": \"apple\", \"color\": \"green\"}'),
(20, 20, 'LIST'),
(21, 21, 'SET'),
(22, 22, 'if x > y:'),
(23, 23, 'while x > y:'),
(24, 24, 'for x in y:'),
(25, 25, 'break');   